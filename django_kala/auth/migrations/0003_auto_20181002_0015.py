# Generated by Django 2.0.8 on 2018-10-02 00:15
from django.db import migrations
from django.contrib.auth.management import create_permissions


def create_permission(Permission, content_type, name):
    permissions = []
    try:
        permissions.append(
            {
                "update": Permission.objects.get_or_create(name='Can manage {0}'.format(name), content_type=content_type, codename='can_manage')[0],
                "existing": Permission.objects.get(content_type=content_type, codename='delete_{0}'.format(name[:-1]))
            }
        )
        permissions.append(
            {
                "update": Permission.objects.get_or_create(name='Can invite users to {0}'.format(name), content_type=content_type, codename='can_invite')[0],
                "existing": Permission.objects.get(content_type=content_type, codename='change_{0}'.format(name[:-1]))
            }
        )
        permissions.append(
            {
                "update": Permission.objects.get_or_create(name='Can create {0}'.format(name), content_type=content_type, codename='can_create')[0],
                "existing": Permission.objects.get(content_type=content_type, codename='add_{0}'.format(name[:-1]))
            }
        )
    except:
        pass # Probably tests
    return permissions


def create_permissions(apps, schema_editor):
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, apps=apps, verbosity=0)
        app_config.models_module = None

    ContentType = apps.get_model("contenttypes", "ContentType")
    Permission = apps.get_model("auth", "Permission")
    Permissions = apps.get_model("kala_auth", "Permissions")
    User = apps.get_registered_model('kala_auth', 'User')
    permissions = create_permission(Permission, ContentType.objects.get(app_label='documents', model='document'), 'documents')
    update_permissions(Permissions, permissions)
    permissions = create_permission(Permission, ContentType.objects.get(app_label='projects', model='project'), 'projects')
    update_permissions(Permissions, permissions)
    permissions = create_permission(Permission, ContentType.objects.get(app_label='organizations', model='organization'), 'organizations')
    update_permissions(Permissions, permissions)

    # The old permission system had each permission specified seperatly, then new system uses roles,
    # So we need to go back through all the users can remove what are "extra" privilages
    # i.e. if a user had create, update, delete, now they are just a manager, so remove the extra
    # creator, invitor roles
    fix_permissions(User, Permissions)


def update_permissions(Permissions, permissions):
    for permission in permissions:
        Permissions.objects.filter(permission=permission['existing']).update(permission=permission['update'])


def fix_permissions(User, Permissions):
    for user in User.objects.all():
        objects = Permissions.objects.filter(user=user).distinct('object_uuid').values_list('object_uuid', flat=True)
        for obj in objects:
            if Permissions.objects.filter(object_uuid=obj, permission__codename='can_manage').exists():
                Permissions.objects.filter(object_uuid=obj).exclude(permission__codename='can_manage').delete()
            if Permissions.objects.filter(object_uuid=obj, permission__codename='can_invite').exists():
                Permissions.objects.filter(object_uuid=obj).exclude(permission__codename='can_invite').delete()




class Migration(migrations.Migration):

    dependencies = [
        ('kala_auth', '0002_auto_20180116_0036'),
    ]

    operations = [
        migrations.RunPython(create_permissions),
    ]
