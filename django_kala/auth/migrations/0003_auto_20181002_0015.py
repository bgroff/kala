# Generated by Django 2.0.8 on 2018-10-02 00:15
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType
from django.db import migrations

from auth.models import Permissions

User = get_user_model()


def create_permission(content_type, name):
    permissions = []
    permissions.append(
        {
            "update": Permission.objects.create(name='Can manage {0}'.format(name), content_type=content_type, codename='can_manage'),
            "existing": Permission.objects.get(content_type=content_type, codename='delete_{0}'.format(name[:-1]))
        }
    )
    permissions.append(
        {
            "update": Permission.objects.create(name='Can invite users to {0}'.format(name), content_type=content_type, codename='can_invite'),
            "existing": Permission.objects.get(content_type=content_type, codename='change_{0}'.format(name[:-1]))
        }
    )
    permissions.append(
        {
            "update": Permission.objects.create(name='Can create {0}'.format(name), content_type=content_type, codename='can_create'),
            "existing": Permission.objects.get(content_type=content_type, codename='add_{0}'.format(name[:-1]))
        }
    )
    return permissions


def create_permissions(apps, schema_editor):
    permissions = create_permission(ContentType.objects.get(app_label='documents', model='document'), 'documents')
    update_permissions(permissions)
    permissions = create_permission(ContentType.objects.get(app_label='projects', model='project'), 'projects')
    update_permissions(permissions)
    permissions = create_permission(ContentType.objects.get(app_label='organizations', model='organization'), 'organizations')
    update_permissions(permissions)

    # The old permission system had each permission specified seperatly, then new system uses roles,
    # So we need to go back through all the users can remove what are "extra" privilages
    # i.e. if a user had create, update, delete, now they are just a manager, so remove the extra
    # creator, invitor roles
    fix_permissions()

def update_permissions(permissions):
    for permission in permissions:
        Permissions.objects.filter(permission=permission['existing']).update(permission=permission['update'])


def fix_permissions():
    for user in User.objects.all():
        objects = Permissions.objects.filter(user=user).distinct('object_uuid').values_list('object_uuid', flat=True)
        for obj in objects:
            if Permissions.objects.filter(object_uuid=obj, permission__codename='can_manage').exists():
                Permissions.objects.filter(object_uuid=obj).exclude(permission__codename='can_manage').delete()
            if Permissions.objects.filter(object_uuid=obj, permission__codename='can_invite').exists():
                Permissions.objects.filter(object_uuid=obj).exclude(permission__codename='can_invite').delete()




class Migration(migrations.Migration):

    dependencies = [
        ('kala_auth', '0002_auto_20180116_0036'),
    ]

    operations = [
        migrations.RunPython(create_permissions),
    ]
